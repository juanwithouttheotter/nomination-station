{"version":3,"sources":["api/moviesApi.js","components/SearchBar/index.jsx","components/Button/index.jsx","components/MovieCard/index.jsx","components/NominationCard/index.jsx","pages/Search Page/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["MovieAPI","searchMovies","search","fetch","then","res","json","catch","err","console","log","SearchBar","props","type","value","inputValue","onChange","searchOnChange","placeholder","onKeyDown","Button","className","btn","onClick","btnAction","data-obj","dataObj","name","MovieCard","id","imbdID","src","poster","alt","title","year","addNomie","NominationCard","Search","state","movies","nominations","event","setState","target","handleFormSearch","a","preventDefault","API","handleKeyDown","key","removeNomie","e","removeId","i","length","splice","localStorage","setItem","JSON","stringify","newNomie","parse","dataset","obj","push","getItem","this","renderedMovies","map","movie","imdbID","Poster","Title","Year","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.789dde46.chunk.js","sourcesContent":["const MovieAPI = {\r\n    async searchMovies(search){\r\n        let res = await fetch(`https://omdbapi.com/?apikey=fb4f4f23&type=movie&s=${search}`).then(res => res.json())\r\n        .catch(err => {console.log(err)});\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default MovieAPI;","//functional component\r\nimport React from 'react';\r\n\r\nfunction SearchBar (props) {\r\n    return <input type='text' value={props.inputValue} onChange={props.searchOnChange} placeholder={props.placeholder} onKeyDown={props.onKeyDown}></input>\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport \"./Button.css\";\n\nfunction Button(props){\n   return <button className={props.btn} onClick={props.btnAction}data-obj={props.dataObj}>{props.name}</button>\n}\n\nexport default Button;","// functional component\nimport React from 'react';\nimport Button from '../Button';\nimport './MovieCard.css';\n\nfunction MovieCard(props){\n    return (\n        <div id={props.imbdID}>\n            <img src={props.poster} alt={props.title + ' poster'}></img>\n            <div>{props.title}</div>\n            <div>{props.year}</div>\n            <Button btn='add' name=\"Nominate\" btnAction={props.addNomie} dataObj={props.dataObj} />\n        </div>\n    ) \n}\n\nexport default MovieCard;","// functional component\r\nimport React from 'react';\r\nimport Button from '../Button';\r\n\r\nfunction NominationCard(props) {\r\n    return(\r\n        <div id={props.id}>\r\n            <img src={props.poster} alt={props.title + ' poster'}></img>\r\n            <div>{props.title}</div>\r\n            <div>{props.year}</div>\r\n            <Button btn='remove' name=\"remove\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NominationCard;","import React, {Component} from 'react';\nimport API from \"../../api/moviesApi\";\nimport Container from \"../../components/Container\";\nimport SearchBar from \"../../components/SearchBar\";\nimport MovieCard from \"../../components/MovieCard\";\nimport NominationCard from \"../../components/NominationCard\";\nimport Button from \"../../components/Button\";\n\nclass Search extends Component {\n    state = {\n        inputValue: '',\n        movies: [],\n        nominations: {}\n    }\n    async componentDidMount() {\n        const nominations = JSON.parse(localStorage.getItem(\"nominations\"));\n        this.setState({nominations})\n    }\n\n    searchOnChange = (event) => {\n        this.setState({\n            inputValue: event.target.value\n        });\n    }\n    handleFormSearch = async (event) => {\n        event.preventDefault();\n        let movies = await API.searchMovies(this.state.inputValue);\n        this.setState({\n            movies: movies.Search\n        });\n\n        console.log(this.state.movies);\n    }\n    handleKeyDown = async (event) => {\n        if (event.key === \"Enter\") {\n            this.handleFormSearch(event);\n        }\n    }\n    removeNomie = (e) => {\n        const removeId = e.target.id;\n        const {nominations} = this.state;\n        for (let i= nominations.length -1; i>=0; i--) {\n            if(nominations[i] === removeId) nominations.splice(i,1);\n        }\n        this.setState({nominations});\n        localStorage.setItem(\"nominations\", JSON.stringify(nominations));\n    }\n    addNomie = (e) => {\n        const newNomie = JSON.parse(e.target.dataset.obj);\n        const {nominations} = this.state;\n        nominations.push(newNomie);\n        this.setState({nominations});\n        localStorage.setItem(\"nominations\", JSON.stringify(nominations));\n    }\n\n    render(renderedMovies = this.state.movies) {\n        return(\n            <div>\n                <SearchBar \n                inputValue={this.inputValue}\n                searchOnChange={this.searchOnChange}\n                onKeyDown={this.handleKeyDown}\n                placeholder=\"Which movie do you want to nominate?\" \n                />\n                <Button btn=\"search\" btnAction={this.handleFormSearch} name=\"search\"/>\n                {/* <div className=\"nominations\">\n                    {this.state.nominations.map(nomie => {\n                        return(\n                        <NominationCard\n                            key={nomie.imdbID}\n                            id={nomie.imdbID}\n                            poster={nomie.Poster}\n                            title={nomie.Title}\n                            year={nomie.Year}\n                        />)\n                    })}\n\n                </div> */}\n\n                <div className=\"search-movies\">\n                    {renderedMovies.map((movie) => {\n                        console.log(movie);\n                        return(\n                            <MovieCard \n                                key={movie.imdbID}\n                                id={movie.imdbID}\n                                poster={movie.Poster}\n                                title={movie.Title}\n                                year={movie.Year}\n                                dataObj={JSON.stringify(movie)}\n                                addNomie={this.addNomie}\n                            />\n\n                        )\n                    })}\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default Search;","// import logo from './logo.svg';\nimport './App.css';\nimport Search from './pages/Search Page'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search></Search>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}